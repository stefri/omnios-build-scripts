#!/usr/bin/perl

# Use enviroment variables for config:
# 'smartdrv_$i' ... Name of the drive in smartcmd_$i 
# 'smartcmd_$i' ... full (!) command to read smart values (usually smartctl -A $DRIVE)
# $i ... starts with 1

use strict;
use warnings;

if (defined $ARGV[0]) {
	if ($ARGV[0] eq 'config') {
                print "graph_args -l 0 --vertical-label count\n";
		print "graph_title SSD LBAs Read/Write\n";
		print "graph_vlabel Total LBAs\n";
		print "graph_category disk\n";
		print "graph_info This graph shows the total LBAs read/written of SSD.\n";
	} elsif ($ARGV[0] eq 'autoconf') {
		print "yes\n";
		exit 0;
   }
}

my $i = 1;

while (exists $ENV{"smartdrv_$i"}) {
        last unless exists $ENV{"smartcmd_$i"};
        my $drv = $ENV{"smartdrv_$i"};
        my $cmd = $ENV{"smartcmd_$i"};
        if (defined $ARGV[0] and $ARGV[0] eq 'config') {
                print "read_$drv.label Read $drv\n";
                print "read_$drv.type DERIVE\n";
                print "written_$drv.label Written $drv\n";
                print "written_$drv.type DERIVE\n";
        } else {
                my $output = `$cmd`;
                my ($line1, $written) = $output =~ /^(241\s+Total.LBAs.Written.*\s(\d+)$)/mi;
                my ($line2, $read) = $output =~ /^(242\s+Total.LBAs.Read.*\s(\d+)$)/mi;
                $written = "" unless $written;
                $read = "" unless $read;
                print "written_$drv.value $written\n";
                print "read_$drv.value $read\n";
        }
        $i++;
}
