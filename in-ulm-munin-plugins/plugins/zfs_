#!/usr/bin/perl -w

use strict;
use warnings;

if ($ARGV[0] and $ARGV[0] eq "autoconf") {
	print "yes\n";
	exit 0;
}

my %func = (
	'cache-efficency' => \&cache_efficency,
	'arc-cache-sizes'   => \&arc_cache_sizes,
	'l2arc-cache-sizes'   => \&l2arc_cache_sizes,
	'cache-accesses'   => \&cache_accesses,
	'cache-hits-by-list' => \&cache_hits_by_list,
	'cache-hits-by-datatype' => \&cache_hits_by_datatype,
	'cache-misses-by-datatype' => \&cache_misses_by_datatype,
);

my ($opt) = $0 =~ /\bzfs_(\S{1,32})$/;
exit 1 unless defined $opt;
exit 2 unless exists $func{$opt};
exit 3 unless ref $func{$opt} eq 'CODE';

&{$func{$opt}};

exit 0;


sub cache_efficency {
# =======================================================
	if ($ARGV[0] and $ARGV[0] eq "config") {
		print "graph_args --base 1000 -l 0 --upper-limit 100 --rigid\n";
		print "graph_vlabel %\n";
      print "graph_scale no\n";
		print "graph_title ARC Efficency\n";
		print "graph_category ZFS\n";
		print "graph_info This graph shows ARC/L2ARC efficency of ZFS.\n";
		print "graph_order arc_hits arc_real_hits l2arc_hits arc_demand_eff arc_prefetch_eff\n";

		print "arc_hits.label ARC Hit %\n";
		print "arc_hits.info .\n";
		print "arc_hits.min 0 .\n";
		print "arc_hits.max 100 .\n";
		print "l2arc_hits.label L2ARC Hit %\n";
		print "l2arc_hits.info .\n";
		print "l2arc_hits.min 0 .\n";
		print "l2arc_hits.max 100 .\n";
		print "arc_real_hits.label ARC Real Hit %\n";
		print "arc_real_hits.info .\n";
		print "arc_real_hits.min 0 .\n";
		print "arc_real_hits.max 100 .\n";
		print "demand_eff.label Demand Data Hit %\n";
		print "demand_eff.info .\n";
		print "demand_eff.min 0 .\n";
		print "demand_eff.max 100 .\n";
		print "prefetch_eff.label Prefetch Data Hit %\n";
		print "prefetch_eff.info .\n";
		print "prefetch_eff.min 0 .\n";
		print "prefetch_eff.max 100 .\n";

    	exit 0;
	}
	
	use Sun::Solaris::Kstat;
	my $Kstat = Sun::Solaris::Kstat->new();

	my $arc_hits = ${Kstat}->{zfs}->{0}->{arcstats}->{hits};
	my $arc_misses = ${Kstat}->{zfs}->{0}->{arcstats}->{misses};
	my $mfu_hits = ${Kstat}->{zfs}->{0}->{arcstats}->{mfu_hits};
	my $mru_hits = ${Kstat}->{zfs}->{0}->{arcstats}->{mru_hits};
	my $real_hits = ($mfu_hits + $mru_hits);
	my $arc_accesses_total = ($arc_hits + $arc_misses);

	if ($arc_accesses_total > 0) {
		printf "arc_hits.value %.1f\n", ($arc_hits / $arc_accesses_total) * 100;
		printf "arc_real_hits.value %.1f\n", ($real_hits / $arc_accesses_total) * 100;
	} else {
		print "arc_hits.value 00\n";
		print "arc_real_hits.value 00\n";
	}

	my $l2arc_hits = ${Kstat}->{zfs}->{0}->{arcstats}->{l2_hits};
	my $l2arc_misses = ${Kstat}->{zfs}->{0}->{arcstats}->{l2_misses};
	my $l2arc_accesses_total = ($l2arc_hits + $l2arc_misses);

	if ($l2arc_accesses_total > 0) {
		printf "l2arc_hits.value %.1f\n", ($l2arc_hits / $l2arc_accesses_total) * 100;
	} else {
		print "l2arc_hits.value 00\n";
	}

	my $demand_data_hits = ${Kstat}->{zfs}->{0}->{arcstats}->{demand_data_hits};
	my $demand_data_misses = ${Kstat}->{zfs}->{0}->{arcstats}->{demand_data_misses};
	my $demand_data_total = ($demand_data_hits + $demand_data_misses);
	if ($demand_data_total > 0) {
		printf "demand_eff.value %.1f\n", ($demand_data_hits / $demand_data_total) * 100;
	} else {
		print "demand_eff.value 00\n";
	}

	my $prefetch_data_hits = ${Kstat}->{zfs}->{0}->{arcstats}->{prefetch_data_hits};
	my $prefetch_data_misses = ${Kstat}->{zfs}->{0}->{arcstats}->{prefetch_data_misses};
	my $prefetch_data_total = ($prefetch_data_hits + $prefetch_data_misses);
	my $prefetch_data_perc = "00";
	if ($prefetch_data_total > 0 ) {
		printf "prefetch_eff.value %.1f\n", ($prefetch_data_hits / $prefetch_data_total) * 100;
	} else {
		print "prefetch_eff.value 00\n";
	}

}
# =======================================================

sub arc_cache_sizes {
# =======================================================
	if ($ARGV[0] and $ARGV[0] eq "config") {
		print "graph_args --base 1024 -l 0 --vertical-label Bytes\n";
		print "graph_title Cache Sizes (arc)\n";
		print "graph_category ZFS\n";
		print "graph_info This graph shows the arc cache sizes.\n";
		print "graph_order arc target mfu mru\n";

		print "arc.label ARC\n";
		print "arc.info .\n";
		print "arc.colour 3ADF00\n";
		print "target.label Target (c)\n";
		print "target.info .\n";
		print "target.colour F2F2F2\n";
		print "mfu.label MFU (c-p)\n";
		print "mfu.draw AREA\n";
		print "mfu.info .\n";
		print "mfu.colour 013ADF\n";
		print "mru.label MRU (p)\n";
		print "mru.draw STACK\n";
		print "mru.info .\n";
		print "mru.colour FF8000\n";

    	exit 0;
	}

	use Sun::Solaris::Kstat;
	my $Kstat = Sun::Solaris::Kstat->new();

	my $target_size = ${Kstat}->{zfs}->{0}->{arcstats}->{c};
	my $arc_size = ${Kstat}->{zfs}->{0}->{arcstats}->{size};
	my $mru_size = ${Kstat}->{zfs}->{0}->{arcstats}->{p};
	my $mfu_size = $target_size - $mru_size;

	printf "arc.value %d\n", $arc_size;
	printf "target.value %d\n", $target_size;
	printf "mfu.value %d\n", $mfu_size;
	printf "mru.value %d\n", $mru_size;
}
# =======================================================


sub l2arc_cache_sizes {
# =======================================================
	if ($ARGV[0] and $ARGV[0] eq "config") {
		print "graph_args --base 1024 -l 0 --vertical-label Bytes\n";
		print "graph_title Cache Size (l2arc)\n";
		print "graph_category ZFS\n";
		print "graph_info This graph shows the l2arc cache size.\n";
		print "graph_order l2arc\n";

		print "l2arc.label L2ARC\n";
		print "l2arc.draw AREA\n";
		print "l2arc.colour 3ADF00\n";

		print "l2arc.info .\n";

    	exit 0;
	}

	use Sun::Solaris::Kstat;
	my $Kstat = Sun::Solaris::Kstat->new();

	my $l2arc_size = ${Kstat}->{zfs}->{0}->{arcstats}->{l2_size};

	printf "l2arc.value %d\n", $l2arc_size;
}
# =======================================================

sub cache_accesses {
# =======================================================
	if ($ARGV[0] and $ARGV[0] eq "config") {
		print "graph_args --base 1000 -l 0 --vertical-label count\n";
		print "graph_title Cache Accesses\n";
		print "graph_category ZFS\n";
		print "graph_info This graph shows the total cache access.\n";
		print "graph_order arc l2arc\n";

		print "arc.label ARC\n";
		print "arc.info .\n";
		print "arc.type DERIVE\n";
		print "arc.min 0\n";
		print "l2arc.label L2ARC\n";
		print "l2arc.info .\n";
		print "l2arc.type DERIVE\n";
		print "l2arc.min 0\n";

    	exit 0;
	}

	use Sun::Solaris::Kstat;
	my $Kstat = Sun::Solaris::Kstat->new();

	my $arc_hits = ${Kstat}->{zfs}->{0}->{arcstats}->{hits};
	my $arc_misses = ${Kstat}->{zfs}->{0}->{arcstats}->{misses};
	my $arc_accesses_total = ($arc_hits + $arc_misses);
	my $l2arc_hits = ${Kstat}->{zfs}->{0}->{arcstats}->{l2_hits};
	my $l2arc_misses = ${Kstat}->{zfs}->{0}->{arcstats}->{l2_misses};
	my $l2arc_accesses_total = ($l2arc_hits + $l2arc_misses);

	printf "arc.value %d\n", $arc_accesses_total;
	printf "l2arc.value %d\n", $l2arc_accesses_total;
}
# =======================================================


sub cache_hits_by_list {
# =======================================================
	if ($ARGV[0] and $ARGV[0] eq "config") {
		print "graph_args --base 1000 -l 0 --upper-limit 100 --rigid\n";
		print "graph_vlabel %\n";
		print "graph_title Cache Hits By List\n";
		print "graph_category ZFS\n";
		print "graph_info This graph shows the Cache Hits by Cache List.\n";
		print "graph_order anon mru mfu mru_ghost mfu_ghost\n";

		print "anon.label Anon\n";
		print "anon.info New Customer, First Cache Hit.\n";
      print "anon.min 0\n";
      print "anon.max 100\n";
		print "mru.label Most Recently Used\n";
		print "mru.info Return Customer.\n";
		print "mru.min 0\n";
		print "mru.max 100\n";
		print "mfu.label Most Frequently Used\n";
		print "mfu.info Frequent Customer.\n";
		print "mfu.min 0\n";
		print "mfu.max 100\n";
		print "mru_ghost.label Most Recently Used Ghost\n";
		print "mru_ghost.info Return Customer Evicted, Now Back.\n";
		print "mru_ghost.min 0\n";
		print "mru_ghost.max 100\n";
		print "mfu_ghost.label Most Frequenly Used Ghost\n";
		print "mfu_ghost.info Frequent Customer Evicted, Now Back.\n";
		print "mfu_ghost.min 0\n";
		print "mfu_ghost.max 100\n";

    	exit 0;
	}
	
	use Sun::Solaris::Kstat;
	my $Kstat = Sun::Solaris::Kstat->new();

	my $arc_hits = ${Kstat}->{zfs}->{0}->{arcstats}->{hits};
	my $mfu_hits = ${Kstat}->{zfs}->{0}->{arcstats}->{mfu_hits};
	my $mru_hits = ${Kstat}->{zfs}->{0}->{arcstats}->{mru_hits};
	my $mfu_ghost_hits = ${Kstat}->{zfs}->{0}->{arcstats}->{mfu_ghost_hits};
	my $mru_ghost_hits = ${Kstat}->{zfs}->{0}->{arcstats}->{mru_ghost_hits};
	my $anon_hits = $arc_hits - ($mfu_hits + $mru_hits + $mfu_ghost_hits + $mru_ghost_hits);
	
	printf "anon.value %.1f\n", ($anon_hits / $arc_hits) * 100;
	printf "mfu.value %.1f\n", ($mfu_hits / $arc_hits) * 100;
	printf "mru.value %.1f\n", ($mru_hits / $arc_hits) * 100;
	printf "mru_ghost.value %.1f\n", ($mru_ghost_hits / $arc_hits) * 100;
	printf "mfu_ghost.value %.1f\n", ($mfu_ghost_hits / $arc_hits) * 100;

}
# =======================================================


sub cache_hits_by_datatype {
# =======================================================
	if ($ARGV[0] and $ARGV[0] eq "config") {
		print "graph_args --base 1000 -l 0 --upper-limit 100 --rigid\n";
		print "graph_vlabel %\n";
		print "graph_title Cache Hits By Data Type\n";
		print "graph_category ZFS\n";
		print "graph_info This graph shows the Cache Hits by Data Type.\n";
		print "graph_order demand prefetch demand_meta prefetch_meta\n";

		print "demand.label Demand\n";
		print "demand.info .\n";
		print "demand.min 0\n";
		print "demand.max 100\n";
		print "prefetch.label Prefetch\n";
		print "prefetch.info .\n";
		print "prefetch.min 0\n";
		print "prefetch.max 100\n";
		print "demand_meta.label Demand Meta\n";
		print "demand_meta.info .\n";
		print "demand_meta.min 0\n";
		print "demand_meta.max 100\n";
		print "prefetch_meta.label Prefetch Meta\n";
		print "prefetch_meta.info .\n";
		print "prefetch_meta.min 0\n";
		print "prefetch_meta.max 100\n";

    	exit 0;
	}
	
	use Sun::Solaris::Kstat;
	my $Kstat = Sun::Solaris::Kstat->new();

	my $arc_hits = ${Kstat}->{zfs}->{0}->{arcstats}->{hits};
	my $demand_data_hits = ${Kstat}->{zfs}->{0}->{arcstats}->{demand_data_hits};
	my $demand_metadata_hits = ${Kstat}->{zfs}->{0}->{arcstats}->{demand_metadata_hits};
	my $prefetch_data_hits = ${Kstat}->{zfs}->{0}->{arcstats}->{prefetch_data_hits};
	my $prefetch_metadata_hits = ${Kstat}->{zfs}->{0}->{arcstats}->{prefetch_metadata_hits};

	printf "demand.value %.1f\n", ($demand_data_hits / $arc_hits) * 100;
	printf "prefetch.value %.1f\n", ($prefetch_data_hits / $arc_hits) * 100;
	printf "demand_meta.value %.1f\n", ($demand_metadata_hits / $arc_hits) * 100;
	printf "prefetch_meta.value %.1f\n", ($prefetch_metadata_hits / $arc_hits) * 100;

}
# =======================================================


sub cache_misses_by_datatype {
# =======================================================
	if ($ARGV[0] and $ARGV[0] eq "config") {
		print "graph_args --base 1000 -l 0 --upper-limit 100 --rigid\n";
		print "graph_vlabel %\n";
		print "graph_title Cache Misses By Data Type\n";
		print "graph_category ZFS\n";
		print "graph_info This graph shows the Cache Misses by Data Type.\n";
		print "graph_order demand prefetch demand_meta prefetch_meta\n";

		print "demand.label Demand\n";
		print "demand.info .\n";
		print "demand.min 0\n";
		print "demand.max 100\n";
		print "prefetch.label Prefetch\n";
		print "prefetch.info .\n";
		print "prefetch.min 0\n";
		print "prefetch.max 100\n";
		print "demand_meta.label Demand Meta\n";
		print "demand_meta.info .\n";
		print "demand_meta.min 0\n";
		print "demand_meta.max 100\n";
		print "prefetch_meta.label Prefetch Meta\n";
		print "prefetch_meta.info .\n";
		print "prefetch_meta.min 0\n";
		print "prefetch_meta.max 100\n";

    	exit 0;
	}
	
	use Sun::Solaris::Kstat;
	my $Kstat = Sun::Solaris::Kstat->new();

	my $arc_misses = ${Kstat}->{zfs}->{0}->{arcstats}->{misses};
	my $demand_data_misses = ${Kstat}->{zfs}->{0}->{arcstats}->{demand_data_misses};
	my $demand_metadata_misses = ${Kstat}->{zfs}->{0}->{arcstats}->{demand_metadata_misses};
	my $prefetch_data_misses = ${Kstat}->{zfs}->{0}->{arcstats}->{prefetch_data_misses};
	my $prefetch_metadata_misses = ${Kstat}->{zfs}->{0}->{arcstats}->{prefetch_metadata_misses};

	printf "demand.value %.1f\n", ($demand_data_misses / $arc_misses) * 100;
	printf "prefetch.value %.1f\n", ($prefetch_data_misses / $arc_misses) * 100;
	printf "demand_meta.value %.1f\n", ($demand_metadata_misses / $arc_misses) * 100;
	printf "prefetch_meta.value %.1f\n", ($prefetch_metadata_misses / $arc_misses) * 100;

}
# =======================================================






##!/usr/perl5/bin/perl -w
##
### benr@cuddletech.com
### arc_summary.pl v0.3
##
## Simplified BSD License (http://www.opensource.org/licenses/bsd-license.php)
## Copyright (c) 2008, Ben Rockwood (benr@cuddletech.com)
## All rights reserved.
##
## Redistribution and use in source and binary forms, with or without modification, 
## are permitted provided that the following conditions are met:
##    * Redistributions of source code must retain the above copyright notice, this 
##	list of conditions and the following disclaimer.
##    * Redistributions in binary form must reproduce the above copyright notice, 
##	this list of conditions and the following disclaimer in the documentation 
##	and/or other materials provided with the distribution.
##    * Neither the name of the Ben Rockwood nor the names of its contributors may be 
##	used to endorse or promote products derived from this software without specific 
##	prior written permission.
##
## THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS 
## OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY 
## AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR 
## CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL 
## DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, 
## DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
## IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT 
## OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
##
#
#use strict;
#use Sun::Solaris::Kstat;
#
#
#
#my $Kstat = Sun::Solaris::Kstat->new();
#
#### System Memory ###
#my $phys_pages = ${Kstat}->{unix}->{0}->{system_pages}->{physmem};
#my $free_pages = ${Kstat}->{unix}->{0}->{system_pages}->{freemem};
#my $lotsfree_pages = ${Kstat}->{unix}->{0}->{system_pages}->{lotsfree};
#my $pagesize = `pagesize`;
#
#my $phys_memory = ($phys_pages * $pagesize);
#my $free_memory = ($free_pages * $pagesize);
#my $lotsfree_memory = ($lotsfree_pages * $pagesize);
#
#print "System Memory:\n";
#printf("\t Physical RAM: \t%d MB\n", $phys_memory / 1024 / 1024);
#printf("\t Free Memory : \t%d MB\n", $free_memory / 1024 / 1024);
#printf("\t LotsFree: \t%d MB\n", $lotsfree_memory / 1024 / 1024);
#print "\n";
###########################
#
#
##### Tunables #####################
#my @tunables = `grep zfs /etc/system`;
#print "ZFS Tunables (/etc/system):\n";
#foreach(@tunables){
#        chomp($_);
#        print "\t $_\n";
#}
#print "\n";
#
##### ARC Sizing ###############
#my $mru_size = ${Kstat}->{zfs}->{0}->{arcstats}->{p};
#my $target_size = ${Kstat}->{zfs}->{0}->{arcstats}->{c};
#my $arc_min_size = ${Kstat}->{zfs}->{0}->{arcstats}->{c_min};
#my $arc_max_size = ${Kstat}->{zfs}->{0}->{arcstats}->{c_max};
#
#my $arc_size = ${Kstat}->{zfs}->{0}->{arcstats}->{size};
#my $mfu_size = ${target_size} - $mru_size;
#my $mru_perc = 100*($mru_size / $target_size);
#my $mfu_perc = 100*($mfu_size / $target_size);
#
#
#print "ARC Size:\n";
#printf("\t Current Size:             %d MB (arcsize)\n", $arc_size / 1024 / 1024);
#printf("\t Target Size (Adaptive):   %d MB (c)\n", $target_size / 1024 / 1024);
#printf("\t Min Size (Hard Limit):    %d MB (zfs_arc_min)\n", $arc_min_size / 1024 / 1024);
#printf("\t Max Size (Hard Limit):    %d MB (zfs_arc_max)\n", $arc_max_size / 1024 / 1024);
#
#print "\nARC Size Breakdown:\n";
#
#printf("\t Most Recently Used Cache Size: \t %2d%% \t%d MB (p)\n", $mru_perc, $mru_size / 1024 / 1024);
#printf("\t Most Frequently Used Cache Size: \t %2d%% \t%d MB (c-p)\n", $mfu_perc, $mfu_size / 1024 / 1024);
#print "\n";
###################################
#
##my $arc_size = ${Kstat}->{zfs}->{0}->{arcstats}->{size};
#
#        
#
######## ARC Efficency #########################
#my $arc_hits = ${Kstat}->{zfs}->{0}->{arcstats}->{hits};
#my $arc_misses = ${Kstat}->{zfs}->{0}->{arcstats}->{misses};
#my $arc_accesses_total = ($arc_hits + $arc_misses);
#
#my $arc_hit_perc = 100*($arc_hits / $arc_accesses_total);
#my $arc_miss_perc = 100*($arc_misses / $arc_accesses_total);
#
#
#my $mfu_hits = ${Kstat}->{zfs}->{0}->{arcstats}->{mfu_hits};
#my $mru_hits = ${Kstat}->{zfs}->{0}->{arcstats}->{mru_hits};
#my $mfu_ghost_hits = ${Kstat}->{zfs}->{0}->{arcstats}->{mfu_ghost_hits};
#my $mru_ghost_hits = ${Kstat}->{zfs}->{0}->{arcstats}->{mru_ghost_hits};
#my $anon_hits = $arc_hits - ($mfu_hits + $mru_hits + $mfu_ghost_hits + $mru_ghost_hits);
#
#my $real_hits = ($mfu_hits + $mru_hits);
#my $real_hits_perc = 100*($real_hits / $arc_accesses_total);
#
#### These should be based on TOTAL HITS ($arc_hits)
#my $anon_hits_perc = 100*($anon_hits / $arc_hits);
#my $mfu_hits_perc = 100*($mfu_hits / $arc_hits);
#my $mru_hits_perc = 100*($mru_hits / $arc_hits);
#my $mfu_ghost_hits_perc = 100*($mfu_ghost_hits / $arc_hits);
#my $mru_ghost_hits_perc = 100*($mru_ghost_hits / $arc_hits);
#
#
#my $demand_data_hits = ${Kstat}->{zfs}->{0}->{arcstats}->{demand_data_hits};
#my $demand_metadata_hits = ${Kstat}->{zfs}->{0}->{arcstats}->{demand_metadata_hits};
#my $prefetch_data_hits = ${Kstat}->{zfs}->{0}->{arcstats}->{prefetch_data_hits};
#my $prefetch_metadata_hits = ${Kstat}->{zfs}->{0}->{arcstats}->{prefetch_metadata_hits};
#
#my $demand_data_hits_perc = 100*($demand_data_hits / $arc_hits);
#my $demand_metadata_hits_perc = 100*($demand_metadata_hits / $arc_hits);
#my $prefetch_data_hits_perc = 100*($prefetch_data_hits / $arc_hits);
#my $prefetch_metadata_hits_perc = 100*($prefetch_metadata_hits / $arc_hits);
#
#
#my $demand_data_misses = ${Kstat}->{zfs}->{0}->{arcstats}->{demand_data_misses};
#my $demand_metadata_misses = ${Kstat}->{zfs}->{0}->{arcstats}->{demand_metadata_misses};
#my $prefetch_data_misses = ${Kstat}->{zfs}->{0}->{arcstats}->{prefetch_data_misses};
#my $prefetch_metadata_misses = ${Kstat}->{zfs}->{0}->{arcstats}->{prefetch_metadata_misses};
#
#my $demand_data_misses_perc = 100*($demand_data_misses / $arc_misses);
#my $demand_metadata_misses_perc = 100*($demand_metadata_misses / $arc_misses);
#my $prefetch_data_misses_perc = 100*($prefetch_data_misses / $arc_misses);
#my $prefetch_metadata_misses_perc = 100*($prefetch_metadata_misses / $arc_misses);
#
#my $prefetch_data_total = ($prefetch_data_hits + $prefetch_data_misses);
#my $prefetch_data_perc = "00";
#if ($prefetch_data_total > 0 ) {
#        $prefetch_data_perc = 100*($prefetch_data_hits / $prefetch_data_total);
#}
#
#my $demand_data_total = ($demand_data_hits + $demand_data_misses);
#my $demand_data_perc = 100*($demand_data_hits / $demand_data_total);
#
#
#print "ARC Efficency:\n";
#printf("\t Cache Access Total:        \t %d\n", $arc_accesses_total);
#printf("\t Cache Hit Ratio:      %2d%%\t %d   \t[Defined State for buffer]\n", $arc_hit_perc, $arc_hits);
#printf("\t Cache Miss Ratio:     %2d%%\t %d   \t[Undefined State for Buffer]\n", $arc_miss_perc, $arc_misses);
#printf("\t REAL Hit Ratio:       %2d%%\t %d   \t[MRU/MFU Hits Only]\n", $real_hits_perc, $real_hits);
#print "\n";
#printf("\t Data Demand   Efficiency:    %2d%%\n", $demand_data_perc);
#if ($prefetch_data_total == 0){ 
#        printf("\t Data Prefetch Efficiency:    DISABLED (zfs_prefetch_disable)\n");
#} else {
#        printf("\t Data Prefetch Efficiency:    %2d%%\n", $prefetch_data_perc);
#}
#print "\n";
#
#
#print "\tCACHE HITS BY CACHE LIST:\n";
#if ( $anon_hits < 1 ){
#        printf("\t  Anon:                       --%% \t Counter Rolled.\n");
#} else {
#        printf("\t  Anon:                       %2d%% \t %d            \t[ New Customer, First Cache Hit ]\n", $anon_hits_perc, $anon_hits);
#}
#printf("\t  Most Recently Used:         %2d%% \t %d (mru)      \t[ Return Customer ]\n", $mru_hits_perc, $mru_hits);
#printf("\t  Most Frequently Used:       %2d%% \t %d (mfu)      \t[ Frequent Customer ]\n", $mfu_hits_perc, $mfu_hits);
#printf("\t  Most Recently Used Ghost:   %2d%% \t %d (mru_ghost)\t[ Return Customer Evicted, Now Back ]\n", $mru_ghost_hits_perc, $mru_ghost_hits);
#printf("\t  Most Frequently Used Ghost: %2d%% \t %d (mfu_ghost)\t[ Frequent Customer Evicted, Now Back ]\n", $mfu_ghost_hits_perc, $mfu_ghost_hits);
#
#print "\tCACHE HITS BY DATA TYPE:\n";
#printf("\t  Demand Data:                %2d%% \t %d \n", $demand_data_hits_perc, $demand_data_hits);
#printf("\t  Prefetch Data:              %2d%% \t %d \n", $prefetch_data_hits_perc, $prefetch_data_hits);
#printf("\t  Demand Metadata:            %2d%% \t %d \n", $demand_metadata_hits_perc, $demand_metadata_hits);
#printf("\t  Prefetch Metadata:          %2d%% \t %d \n", $prefetch_metadata_hits_perc, $prefetch_metadata_hits);
#
#print "\tCACHE MISSES BY DATA TYPE:\n";
#printf("\t  Demand Data:                %2d%% \t %d \n", $demand_data_misses_perc, $demand_data_misses);
#printf("\t  Prefetch Data:              %2d%% \t %d \n", $prefetch_data_misses_perc, $prefetch_data_misses);
#printf("\t  Demand Metadata:            %2d%% \t %d \n", $demand_metadata_misses_perc, $demand_metadata_misses);
#printf("\t  Prefetch Metadata:          %2d%% \t %d \n", $prefetch_metadata_misses_perc, $prefetch_metadata_misses);
#
################################################
#
##### L2ARC Sizing ###############
#my $l2arc_size = ${Kstat}->{zfs}->{0}->{arcstats}->{l2_size};
#
#print "\nL2ARC Size:\n";
#printf("\t Current Size:             %d MB (l2_size)\n", $l2arc_size / 1024 / 1024);
#
#
######## L2ARC Efficency #########################
#my $l2arc_hits = ${Kstat}->{zfs}->{0}->{arcstats}->{l2_hits};
#my $l2arc_misses = ${Kstat}->{zfs}->{0}->{arcstats}->{l2_misses};
#my $l2arc_accesses_total = ($l2arc_hits + $l2arc_misses);
#
#my $l2arc_hit_perc = 100*($l2arc_hits / $l2arc_accesses_total);
#my $l2arc_miss_perc = 100*($l2arc_misses / $l2arc_accesses_total);
#
#
#print "\nL2ARC Efficency:\n";
#printf("\t Cache Access Total:        \t %10d\n", $l2arc_accesses_total);
#printf("\t Cache Hit Ratio:      %3d%%\t %10d\n", $l2arc_hit_perc, $l2arc_hits);
#printf("\t Cache Miss Ratio:     %3d%%\t %10d\n", $l2arc_miss_perc, $l2arc_misses);
#
#print "\n";
#print "---------------------------------------------\n";
###################################
#
# vim:syntax=perl ts=3 nu noai
